JSP (Java Server Page )
--------------

JSP technology is used to create web application just like Servlet technology. 
It can be thought of as an extension to servlet because it provides more functionality than servlet such as expression language, jstl etc.


A JSP page consists of HTML tags and JSP tags. 
The jsp pages are easier to maintain than servlet because we can separate designing and development. 
It provides some additional features such as Expression Language, Custom Tag etc.



Advantage of JSP over Servlet:
Extension to Servlet -
JSP technology is the extension to servlet technology. 
We can use all the features of servlet in JSP. 
In addition to, we can use implicit objects, predefined tags, expression language and Custom tags in JSP, that makes JSP development easy.

Easy to maintain -
JSP can be easily managed because we can easily separate our business logic with presentation logic.


Fast Development-
No need to recompile and redeploy
If JSP page is modified, we don't need to recompile and redeploy the project. 
The servlet code needs to be updated and recompiled if we have to change the look and feel of the application.


Life cycle : JSP Page
-------------------------
Whenever the client browser requests for a particular JSP page, the server, in turn, sends a request to the JSP engine.
A JSP engine is a part of a Web container that compiles a  JSP page to a servlet.

1.Translation of JSP Page
2.Compilation of JSP Page
3. Class loading (class file is loaded by the classloader)
4. Instantiation (Object of the Generated Servlet is created).
5. Initialization ( jspInit() method is invoked by the container).
6. Reqeust processing ( _jspService() method is invoked by the container).
7. Destroy ( jspDestroy() method is invoked by the container).

Life cycle methods:
1.  jspInit()  =======  to intialize jsp page at first loading time.(same as init() in servlet)

2. _jspService() ==== to give service/process to client (same as service() in servlet)

3. jspDestroy()  === to clean jsp instance from container (same as destroy() in servlet)

Remember :   jspInit() & jspDestroy() ---- you may override , but not _jspService().


The JSP API consists of two packages:
---------------------------
javax.servlet.jsp
javax.servlet.jsp.tagext

JSP scriptlet tag
------------------
A scriptlet tag is used to execute java source code in JSP. 
Syntax is as follows:
<%  java source code %>  

JSP expression tag
-----------------
The code placed within JSP expression tag is written to the output stream of the response. 
Syntax of JSP expression tag
<%=  statement %>  

JSP Declaration Tag
---------
The JSP declaration tag is used to declare fields and methods.
The code written inside the jsp declaration tag is placed outside the service() method of auto generated servlet.
So it doesn't get memory at each request.

The syntax of the declaration tag is as follows:
<%!  field or method declaration %>  



JSP Implicit Objects
-------------
out		JspWriter
request		HttpServletRequest
response	HttpServletResponse
config		ServletConfig
application	ServletContext
session		HttpSession
pageContext	PageContext
page		Object
exception	Throwable





JSP directives
-----------
The jsp directives are messages that tells the web container how to translate a JSP page into the corresponding servlet.
There are three types of directives:
page directive
include directive
taglib directive

Syntax of JSP Directive:     <%@ directive attribute="value" %>  


1. page directive: used to set page attributes for current jsp page.

<%@page import="java.util.Date"%>
<%@ page language="java" contentType="text/html"%>


2. include directive:
used to include the contents of any resource it may be jsp file, html file or text file. 
includes the original content of the included resource at page translation time (the jsp page is translated only once so it will be better to include static resource).

<%@ include file="resourceName" %>  


Lab:

Menu.jsp
<a href='#'>New User</a> &nbsp;&nbsp;|
<a href='#'>Login</a>&nbsp;&nbsp;|
<a href='#'>Forget Password?</a>&nbsp;&nbsp;|
<a href='#'>About Us</a>&nbsp;&nbsp;|
<a href='#'>Contact Us</a>
<hr>

Need to include Menu.jsp under current jsp page:Like HcfLcm.jsp

<body>
<%@include file="Menu.jsp" %>
.......
</body>


3. taglib directive:
include external tag libraries.

<%@ taglib=" "   uri=" "  prefix=" "%>




JSP action tags are :
======================
There are many JSP action tags or elements. 
Each JSP action tag is used to perform some specific tasks.
The action tags are used to control the flow between pages and to use Java Bean. 


1.  <jsp:include >  :  includes another resource.

Syntax of jsp:include action tag without parameter
<jsp:include page="relativeURL | <%= expression %>" />  

2. <jsp:forward> : forwards the request and response to another resource.

Syntax of jsp:forward action tag without parameter
<jsp:forward page="relativeURL | <%= expression %>" />  





Java Bean
--------------

A Java Bean is a java class that should follow following conventions:
It should have a no-arg constructor.
It should be Serializable.
It should provide methods to set and get the values of the properties, known as getter and setter methods.


jsp:useBean action tag
----
The jsp:useBean action tag is used to locate or instantiate a bean class. 
If bean object of the Bean class is already created, it doesn't create the bean depending on the scope. 
But if object of bean is not created, it instantiates the bean.

<jsp:useBean id= "instanceName" scope= "page | request | session | application"   class= "packageName.className" >  
</jsp:useBean> 


jsp:setProperty action tag
------------------
<jsp:setProperty name="instanceOfBean" property= "*"    |   property="propertyName" value="{ string | <%= expression %>}"   /> 


jsp:getProperty action tag 
------------
returns the value of the property.
<jsp:getProperty name="instanceOfBean" property="propertyName" /> 


=============================
<jsp:include page="url" flush="true"/>
<jsp:forward page="url" flush="true"/>

But if the included/forwarded page has some attributes which we need to pass from current page:
then syntax:

<jsp:include page="url" flush="true">
     <jsp:param name="param1" value="value1"/>
     <jsp:param name="param2" value="value2"/>
</jsp:include>

<jsp:forward page="url" flush="true">
     <jsp:param name="param1" value="value1"/>
     <jsp:param name="param2" value="value2"/>
</jsp:forward>

<body>
<%
String uid= request.getParameter("uid");
String pwd = request.getParameter("pwd");
if(pwd.equals("12345")){
%>
     <jsp:forward page="Welcome.jsp">
           <jsp:param value="<%=uid%>" name="uid"/>
           <jsp:param value="Welcome to Our Site!!!!!" name="msg"/>
     </jsp:forward>
<%	
}
else{
%>	
  <jsp:forward page="Welcome.jsp">
           <jsp:param value="<%=uid%>" name="uid"/>
           <jsp:param value="Sorry! try again!!!!!" name="msg"/>
  </jsp:forward>
<%	
}

%>
</body>

Welcome.jsp
------------
Welcome.jsp
------------------

<body>
<%
    String uid = request.getParameter("uid");
    String msg = request.getParameter("msg");
%>
<%=msg%> &nbsp; <%=uid%>
</body>

















Calc.html
----
<body bgcolor="pink">
<form action="Calc.jsp" method="post">
<table border=1>
<tr> <th> First Number:  </th> <td>  <input type='text' id='t1' name='t1'>  </td>  </tr>
<tr> <th> Second Number:  </th>  <td>  <input type='text' id='t2' name='t2'>  </td>  </tr>
<tr> <th  colspan="2">  <input type='submit' value='Ok'>  <input type='reset'>  </th>  </tr>
</table>
</form>
</body>

==========Calc.jsp
<body>
<%
	int a = Integer.parseInt(request.getParameter("t1"));
	int b = Integer.parseInt(request.getParameter("t2"));
	int c=a+b;
%>

<h1>Result is <%=c%></h1>

</body>
=========================================HCF & LCM Calculate 
HcfLcm.jsp

<body>
<%!   int fun() {  }   %>

<%
	a = Integer.parseInt(request.getParameter("t1"));
	b = Integer.parseInt(request.getParameter("t2"));
	opt = Integer.parseInt(request.getParameter("opt"));
	int m =a*b;
	while(a%b>0){
		int r=a%b;
		a=b;
		b=r;
	}
	if(opt==1){
%>
   <h1>HCF is <%=b%></h1>
<%
	}
	else {
%>   
  <h1>LCM is <%=m/b%></h1>
<%
  }
%>
</body>



























