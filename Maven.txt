Maven is a project management and comprehension tool that provides developers a complete build lifecycle framework. 

Development team can automate the project's build infrastructure in almost no time as Maven uses a standard directory layout and a default build lifecycle.


Maven simplifies and standardizes the project build process. 

Maven handles compilation, distribution, documentation, team collaboration and other tasks seamlessly. 

Maven increases reusability and takes care of most of the build related tasks.

problem without Maven
----------------------------
1) Adding set of Jars in each project: 
For struts, spring, hibernate frameworks, need to add set of jar files in each project as well as include all the dependencies of jars also. 

2) Creating the right project structure: 
Create the right project structure in servlet, struts , springs etc, otherwise it will not be executed.

3) Building and Deploying the project: 
must have to build and deploy the project so that it may work.

Solved problem by Maven
---------------------------
Maven simplifies the above mentioned problems. 
It does mainly following tasks.
 It makes a project easy to build.
 It provides uniform build process (maven project can be shared by all the maven projects).
 It provides project information (log document, cross referenced sources, mailing list, dependency list, unit test reports etc.).


The primary goal of Maven is to provide developer with the following −
-----------------------------------
a. A comprehensive model for projects, which is reusable, maintainable, and easier to comprehend.
b. Plugins or tools that interact with this declarative model.
c. Apache Maven helps to manage : Builds , Documentation , Reporting , Releases , Distribution


Maven project structure
----------------------
Assuming, ${basedir} denotes the project location −

Item			Default
source code		${basedir}/src/main/java
Resources		${basedir}/src/main/resources
Tests			${basedir}/src/test
Complied byte code	${basedir}/target
distributable JAR	${basedir}/target/classes


Maven - Environment Setup
------------------
Step 1 - Verify Java Installation on your Machine

Step 2 - Set JAVA Environment

Set the JAVA_HOME environment variable
For Windows : Set the environment variable JAVA_HOME to C:\Program Files\Java\jdk1.7.0_60
For Linux : export JAVA_HOME=/usr/local/java-current

Append Java compiler location to System Path.
For Windows:  Append the string “;C:\Program Files\Java\jdk1.7.0.60\bin”  to the end of the system variable, Path.
For Linux:  export PATH=$PATH:$JAVA_HOME/bin/

Verify Java Installation using java -version command
Verify Java Installation using java -version command

Step 3 - Download Maven Archive
Download Maven 2.2.1 from https://maven.apache.org/download.cgi.

Step 4 - Extract the Maven Archive

Step 5 - Set Maven Environment Variables
Add M2_HOME, M2, MAVEN_OPTS to environment variables.

For Windows :  Set the environment variables using system properties.
M2_HOME=C:\ProgramFiles\ApacheSoftwareFoundation\apache-maven-3.3.1 M2=%M2_HOME%\bin 
MAVEN_OPTS=-Xms256m -Xmx512m

For Linux: Open command terminal and set environment variables.
export M2_HOME=/usr/local/apache-maven/apache-maven-3.3.1 
export M2=$M2_HOME/bin
export MAVEN_OPTS=-Xms256m -Xmx512m

Step 6 - Add Maven bin Directory Location to System Path
Now append M2 variable to System Path.
Windows :  Append the string ;%M2% to the end of the system variable, Path.
Linux: export PATH=$M2:$PATH

Step 7 - Verify Maven Installation
Now open console and execute the following mvn command.

Open command type & type command as :  mvn --version


pom.xml
----------------
Maven project structure and contents are declared in an xml file, pom.xml.
pom.xml is referred as Project Object Model (POM).
It is the fundamental unit of the entire Maven system. 
It is an XML file that resides in the base directory of the project as pom.xml.
The POM contains information about the project and various configuration detail used by Maven to build the project(s).

Elements of maven pom.xml file
--------------------
project : it is the root element of pom.xml
modelVersion: sub-element of project, indicates model version
groupId: sub-element of project, indicates id of the project group
artifactId: sub-element of project, specifies id of artifact(project)

<project xmlns = "http://maven.apache.org/POM/4.0.0"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0
   http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>com.companyname.project-group</groupId>
   <artifactId>project</artifactId>
   <version>1.0</version>
</project>


packaging: defines packaging type- jar, war etc.
name: defines maven project name
url: defines url of maven project
depdendencies: define dependencies in project
dependency: defines a dependency under dependencies
scope: defines the scope of maven project  as compile/provided/runtime/test/system/import

For Servlet:
<dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>
		........
 </dependencies>


Maven - Repositories
----------------

In Maven terminology, a repository is a directory where all the project jars, library jar, plugins or any other project specific artifacts are stored and can be used by Maven easily.

Maven repository are of three types. 
local
central
remote

Local Repository
-----------------------
Maven local repository is a folder location on your machine. It gets created when you run any maven command for the first time.
Maven local repository keeps project's all dependencies (library jars, plugin jars etc.). 
When run a Maven build, then Maven automatically downloads all the dependency jars into the local repository. 
It helps to avoid references to dependencies stored on remote machine every time a project is build.

<localRepository>C:/MyLocalRepository</localRepository>


Central Repository
----------------------------
Maven central repository is repository provided by Maven community. 
It contains a large number of commonly used libraries.
When Maven does not find any dependency in local repository, it starts searching in central repository using following URL  https://repo1.maven.org/maven2/

Remote Repository
-----------------------------
Sometimes, Maven does not find a mentioned dependency in central repository as well. 
It then stops the build process and output error message to console. 
To prevent such situation, Maven provides concept of Remote Repository, which is developer's own custom repository containing required libraries or other project jars.

<repositories>
      <repository>
         <id>companyname.lib1</id>
         <url>http://download.companyname.org/maven2/lib1</url>
      </repository>
      <repository>
         <id>companyname.lib2</id>
         <url>http://download.companyname.org/maven2/lib2</url>
      </repository>
</repositories>


Maven Archetypes
-----------------
Maven archetypes are project templates which can be generated for your project by Maven. 
In other words, when you are starting a new project you can generate a template for that project with Maven. 
In Maven a template is called an archetype. 
Each Maven archetype thus corresponds to a project template that Maven can generate.

Maven contains a lot of archetypes. 
To see a full list of Maven archetypes, simply run this command:  mvn archetype:generate

**Here, Maven will output all its available archetypes to the command prompt. 
At the end Maven will ask which Maven archetype to generate. If know the number of the archetype to generate, type in the number in the command prompt and press enter.

There is a Maven archetype which can generate a new Java project including files for the Eclipse IDE. Maven command:
mvn eclipse:eclipse

Maven contains an IntelliJ IDEA archetype, generate IDEA archetype using this Maven command:
mvn idea:idea


Maven Phases
=====================
For Maven Build, these are the most common default lifecycle phases executed.

a. validate: validate the project is correct and all necessary information is available.
b. compile: compile the source code of the project.
c. test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
d. package: take the compiled code and package it in its distributable format, such as a JAR.
e. integration-test: process and deploy the package if necessary into an environment where integration tests can be run.
f. verify: run any checks to verify the package is valid and meets quality criteria.
g. install: install the package into the local repository, for use as a dependency in other projects locally.
h. deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.

There are two other Maven lifecycles of note beyond the default list above. They are

1. clean: cleans up artifacts created by prior builds
2. site: generates site documentation for this project


Lab:-----------------

Create a simple maven java project:
To create a simple java project using maven, you need to open command prompt and run the archetype:generate command of mvn tool.

Syntax :
mvn archetype:generate -DgroupId=groupid -DartifactId=artifactid   
-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=booleanValue  

Example:
mvn archetype:generate -DgroupId=com.javatpoint -DartifactId=CubeGenerator   
-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false  

Check the maven project sturcture.


Compile the Maven Java Project:
To compile the project, go to the project directory,

command prompt: mvn clean compile  

Run the Maven Java Project:
To run the project, go to the project directory\target\classes,

command prompt: java com.javatpoint.App  

Build the maven project or package maven project:
command prompt: mvn package  

Now a jar file is created inside the project/target directory.
run the maven project by the jar file:
java -classpath target\CubeGenerator-1.0-SNAPSHOT.jar;.; com.pack.App  
(Here App is the main class)


To create a simple maven web application :
------------------------
Syntax
mvn archetype:generate -DgroupId=aaa -DartifactId=appxy -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=booleanValue  

Example
mvn archetype:generate -DgroupId=com.javatpoint -DartifactId=CubeGeneratorWeb   
-DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false  


Maven – Labs Maven Webapp in Eclipse
------------------------
1) Open eclipse IDE
2) Import the maven project
File Menu -> Import -> Maven -> Existing Maven Projects

-> Finish.
3) Run the maven web project
Right click on project -> Run As -> Run on Server




























