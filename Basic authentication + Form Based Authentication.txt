Basic authentication
--------------
In Basic authentication, if you try to hit a web application url that is protected and you are currently unauthenticated, a popup window appears and you enter a particular username/password, which gets sent to Tomcat. 
Tomcat checks to see that the sent username and password match a user entry in tomcat-users.xml, and it makes sure that the user's tomcat-users.xml role (or roles) match the role (or roles) that have access to your web application resource, which is specified in your web.xmlW file. 
If we have a match (username/password/role), the user gains access to the application resource.

Create Role and User in tomcat-users.xml
-------------------
We can create role and user in tomcat. 
Go to tomcat_home/conf/tomcat-users.xml. 
Add the role and user.

tomcat-users.xml

<role rolename="employee"/>
<user username="ram" password="ram" roles="employee"/>

Here we have created employee role and a user as username ram and password as ram.


Now update web.xml file as:

<!--Defines basic Security Constraint -->
<security-constraint>
		<web-resource-collection>
			<web-resource-name>Wildcard means whole app requires authentication</web-resource-name>
			<url-pattern>/*</url-pattern>
			<http-method>GET</http-method>
			<http-method>POST</http-method>
		</web-resource-collection>
		<auth-constraint>
			<role-name>employee</role-name>
		</auth-constraint>

		<user-data-constraint>
			<transport-guarantee>NONE</transport-guarantee>
		</user-data-constraint>
	</security-constraint>

	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>

Now design pages for web application , like index.jsp , home.html etc.

Now restart server and run the web application, it will pop-up window for authentication checks.

=====================================


Form Based Authentication in JSP using Tomcat
=======================================
Java EE provides form based authentication for web application in which a login form is displayed. 
The security is based on role. We can define role and use credentials in tomcat-users.xml. 

web.xml configures <security-constraint>, <login-config> and <security-role>. 
To create login form we must use j_security_check action in the form tag. 
Username and password must be named as j_username and j_password.

Create Role and User in tomcat-users.xml
-------------------
We can create role and user in tomcat. 
Go to tomcat_home/conf/tomcat-users.xml. 
Add the role and user.

tomcat-users.xml

<role rolename="employee"/>
<user username="ram" password="ram" roles="employee"/>

Here we have created employee role and a user as username ram and password as ram.



Update web.xml with following tags:
---------------------------
<security-constraint>, <login-config> and <security-role> in web.xml

To configure security in web.xml, we need to add below tags .

<security-constraint>: This tag defines web resource collection in which URL pattern is defined. This is the URL pattern for which security will be applied and login page will be displayed.

<login-config>: This tag defines authentication method, realm name and form login configuration. In form login configuration, we need to define form-login-page and form-error-page.

<security-role>: This tag defines the security role. This role matches to role defined in tomcat-users.xml.


 <!--Defines Security Constraint -->
    <security-constraint>
        <display-name>JSP Demo Constraint</display-name>
        <web-resource-collection>
            <web-resource-name>cp</web-resource-name>
            <description/>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <description/>
            <role-name>employee</role-name>
        </auth-constraint>
    </security-constraint>
<!--Defines Login Config -->
    <login-config>
        <auth-method>FORM</auth-method>
        <realm-name>file</realm-name>
        <form-login-config>
            <form-login-page>/login.jsp</form-login-page>
            <form-error-page>/error.jsp</form-error-page>
        </form-login-config>
    </login-config>
<!--Defines Security Role -->
    <security-role>
        <description/>
        <role-name>employee</role-name>
    </security-role>




To create a login form, we must use j_security_check, j_username and j_password. 
We need to define form action as j_security_check and username input field name must be j_username and password input field name must be j_password. 
Java EE defines j_security_check action for login form and in this way many different web application resources can be authenticated. 


login.jsp
 <html>
  <head><title></title>
  </head>
  <body>
        <h2>Login screen</h2>
        <form name="loginForm" method="POST" action="j_security_check">
            <p>User name: <input type="text" name="j_username" size="20"/></p>
            <p>Password: <input type="password" size="20" name="j_password"/></p>
            <p>  <input type="submit" value="Submit"/></p>
        </form>       
   </body>
</html> 


error.jsp
 <html>
  <head><title>Login Error</title>
  </head>
  <body>
       <h3>Login Error</h3>   
       <a href="index.jsp">Click to Login Again</a>     
  </body>
</html> 

index.jsp
 <h1>Welcome to our site.....</h1>
<a href="logout.jsp" >Click to Logout </a> 



logout.jsp
<%
session.invalidate();
response.sendRedirect("index.jsp");
%> 

