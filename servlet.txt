A web application is an application accessible from the web. A web application is composed of web components like Servlet, JSP, Filter, etc. and other elements such as HTML, CSS, and JavaScript. The web components typically execute in Web Server and respond to the HTTP request.


Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).

Servlet technology is robust and scalable because of java language. Before Servlet, CGI (Common Gateway Interface) scripting language was common as a server-side programming language. CGI technology enables the web server to call an external program and pass HTTP request information to the external program to process the request. For each request, it starts a new process.
There are many problems in CGI technology:

If the number of clients increases, it takes more time for sending the response.
For each request, it starts a process, and the web server is limited to start processes.
It uses platform dependent language e.g. C, C++, perl.

There are many advantages of Servlet over CGI. The web container creates threads for handling the multiple requests to the Servlet. Threads have many benefits over the Processes such as they share a common memory area, lightweight, cost of communication between the threads are low. 



Servlet API
-------------

The javax.servlet and javax.servlet.http packages represent interfaces and classes for servlet api.

The javax.servlet package contains many interfaces and classes that are used by the servlet or web container. These are not specific to any protocol.

The javax.servlet.http package contains interfaces and classes that are responsible for http requests only.

Servlet interface
======================
Servlet interface provides common behaviorto all the servlets.Servlet interface defines methods that all servlets must implement.

Servlet interface needs to be implemented for creating any servlet (either directly or indirectly). It provides 3 life cycle methods that are used to initialize the servlet, to service the requests, and to destroy the servlet and 2 non-life cycle methods.

public void init(ServletConfig config)	:
initializes the servlet. It is the life cycle method of servlet and invoked by the web container only once.

public void service(ServletRequest request,ServletResponse response)	:
provides response for the incoming request. It is invoked at each request by the web container.

public void destroy()	:
is invoked only once and indicates that servlet is being destroyed.
================================================================
public class ServletLifeCycle implements Servlet {

public void init(ServletConfig config) throws ServletException {
		System.out.println("Servlet is started");
	}
public void destroy() {
		System.out.println("Servlet is removed");
	}
public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {
		System.out.println("Servlet provides service");
	}
public ServletConfig getServletConfig() {
		return null;
	}
public String getServletInfo() {
		return null; 
	}
}


http://localhost:8084/web1/ServletLifeCycle


Code for a servlet:

public class calculator extends HttpServlet {

protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
..... 
}

protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
..... 
}

}


To read value from request object : method is :  
request.getParameter("paramname" ==> returns a String object

To write value to client browser using response object ==>
PrintWriter out = response.getWriter();
out.println("<html><body bgcolor='pink'>");
out.println("<h1>Result is "+c+"</h1>");

** we may write java code as well as html code



Deployment Descriptor
----------------------
present under /WEB-INF/web.xml 
It provides description about web-module.
a. Part of the standard 
b. Defines servlets used in the web application 
c. Maps servlets to URLs 
d. A servlet can map to many URLs
e. Defines resources available to the web app
f. Defines security constraints
g. Defines other stuff like :
    1. Welcome file list 2. Session timeout 3. Error page mapping




====================   Page transfer on server side :

1. RequestDispatcher  :  called by request object

    RequestDispatcher rd = requset.getRequestDispatcher("page url");
    rd.forward(request,response);
    or
    rd.include(request,response);


2. sendRedirect()  -- method , called by response object
    response.sendRedirect("page url");





if(uid.equalsIgnoreCase("abc") && pwd.equals("welcome")){
//RequestDispatcher rd = request.getRequestDispatcher("welcome.html");
//rd.forward(request, response);
response.sendRedirect("welcome.html");
System.out.println("success");
		}
else{
PrintWriter out = response.getWriter();
out.println("<h3>Sorry.. try again....</h3>");
//RequestDispatcher rd = request.getRequestDispatcher("login.html");
//rd.include(request, response);	
response.sendRedirect("login.html");
System.out.println("fail");

-------------------------  Servlet Life cycle  ------------------




-------------------------  Servlet Config  ------------------
It is specific for each servlet.  Each holds configuration information for a particular servlet & it
should be injected at time of initialization using method :  init()

This initialization is taken care of servlet container manager.

ServletConfig can access any parameter from web.xml.



  <servlet>
    <description></description>
    <display-name>login</display-name>
    <servlet-name>login</servlet-name>
    <servlet-class>pack.login</servlet-class>
    <init-param>
      <param-name>uid</param-name>
      <param-value>aaa</param-value>
    </init-param>
    <init-param>
      <param-name>pwd</param-name>
      <param-value>12345</param-value>
    </init-param>    
  </servlet>







